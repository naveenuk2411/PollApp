{"ast":null,"code":"var _jsxFileName = \"/Users/naveen.kumar3/PollReactApp/pollapp/src/pages/PollsPage.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Box, Stack, Typography } from \"@mui/material\";\nimport PollCard from \"../components/PollCard\";\nimport { PollPageType } from \"../types/Poll\";\nimport axios from \"axios\";\nimport { POLL_SERVER_GET_ALL_POLLS } from \"../constants/Routes\";\nimport { useAuth } from \"../customHooks/useAuth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PollsPage = props => {\n  _s();\n  const [polls, setPolls] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [hasError, setHasError] = React.useState(false);\n  const [errorMessage, setErrorMessage] = React.useState(\"\");\n  const {\n    authToken\n  } = useAuth();\n  const fetchPolls = async () => {\n    setIsLoading(true);\n    setHasError(false);\n    setErrorMessage(\"\");\n    try {\n      const res = await axios.get(POLL_SERVER_GET_ALL_POLLS, {\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n      let pollsData = [];\n      pollsData = res.data.polls.filter(poll => {\n        if (props.pollPageType === PollPageType.ONGOING && poll.status === true) {\n          return {\n            id: poll.id,\n            title: poll.title,\n            desciption: poll.description\n          };\n        }\n        if (props.pollPageType === PollPageType.PAST && poll.status === false) {\n          return {\n            id: poll.id,\n            title: poll.title,\n            desciption: poll.description\n          };\n        }\n      });\n      setPolls(pollsData);\n    } catch (error) {\n      console.log(\"Error in fetching polls\", error);\n      setHasError(true);\n      setErrorMessage(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  React.useEffect(() => {\n    fetchPolls();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h2\",\n      children: \"Fetching polls information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this) : hasError ? /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h2\",\n      children: \"Something went wrong from our end\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this) : polls.length === 0 ? /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h2\",\n      children: \"No polls found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        marginTop: \"2%\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          children: \"Ongoing polls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          direction: \"row\",\n          marginTop: \"4em\",\n          columnGap: \"4em\",\n          rowGap: \"4em\",\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          children: polls.map(poll => /*#__PURE__*/_jsxDEV(PollCard, {\n            cardTitle: poll.title,\n            cardDescription: poll.description,\n            buttonText: props.pollCardButtonText,\n            onClickHandler: props.pollCardHandler\n          }, poll.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)\n  }, void 0, false);\n};\n_s(PollsPage, \"vJEMiWOqrrQeuptUHvdnGbs4Czs=\", false, function () {\n  return [useAuth];\n});\n_c = PollsPage;\nexport default PollsPage;\nvar _c;\n$RefreshReg$(_c, \"PollsPage\");","map":{"version":3,"names":["React","Box","Stack","Typography","PollCard","PollPageType","axios","POLL_SERVER_GET_ALL_POLLS","useAuth","jsxDEV","_jsxDEV","Fragment","_Fragment","PollsPage","props","_s","polls","setPolls","useState","isLoading","setIsLoading","hasError","setHasError","errorMessage","setErrorMessage","authToken","fetchPolls","res","get","headers","Authorization","pollsData","data","filter","poll","pollPageType","ONGOING","status","id","title","desciption","description","PAST","error","console","log","message","useEffect","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","length","marginTop","direction","columnGap","rowGap","display","flexWrap","map","cardTitle","cardDescription","buttonText","pollCardButtonText","onClickHandler","pollCardHandler","_c","$RefreshReg$"],"sources":["/Users/naveen.kumar3/PollReactApp/pollapp/src/pages/PollsPage.tsx"],"sourcesContent":["import React from \"react\";\nimport { Box, Stack, Typography } from \"@mui/material\";\nimport PollCard from \"../components/PollCard\";\nimport { PollPageType } from \"../types/Poll\";\nimport axios from \"axios\";\nimport { POLL_SERVER_GET_ALL_POLLS } from \"../constants/Routes\";\nimport { useAuth } from \"../customHooks/useAuth\";\n\nexport interface PollInfo {\n  id: number;\n  title: string;\n  description: string;\n}\n\ninterface ActivePollsPageProps {\n  pollPageType: PollPageType;\n  pollCardButtonText: string;\n  pollCardHandler: () => void;\n}\n\nconst PollsPage = (props: ActivePollsPageProps): JSX.Element => {\n  const [polls, setPolls] = React.useState<PollInfo[]>([]);\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n  const [hasError, setHasError] = React.useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = React.useState<string>(\"\");\n\n  const { authToken } = useAuth();\n\n  const fetchPolls = async () => {\n    setIsLoading(true);\n    setHasError(false);\n    setErrorMessage(\"\");\n    try {\n      const res = await axios.get(POLL_SERVER_GET_ALL_POLLS, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      });\n      let pollsData: PollInfo[] = [];\n      pollsData = res.data.polls.filter((poll: any) => {\n        if (\n          props.pollPageType === PollPageType.ONGOING &&\n          poll.status === true\n        ) {\n          return {\n            id: poll.id,\n            title: poll.title,\n            desciption: poll.description,\n          };\n        }\n        if (props.pollPageType === PollPageType.PAST && poll.status === false) {\n          return {\n            id: poll.id,\n            title: poll.title,\n            desciption: poll.description,\n          };\n        }\n      });\n      setPolls(pollsData);\n    } catch (error) {\n      console.log(\"Error in fetching polls\", error);\n      setHasError(true);\n      setErrorMessage((error as Error).message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  React.useEffect(() => {\n    fetchPolls();\n  }, []);\n\n  return (\n    <>\n      {isLoading ? (\n        <Typography variant=\"h2\">Fetching polls information</Typography>\n      ) : hasError ? (\n        <Typography variant=\"h2\">Something went wrong from our end</Typography>\n      ) : polls.length === 0 ? (\n        <Typography variant=\"h2\">No polls found</Typography>\n      ) : (\n        <>\n          <Box marginTop=\"2%\">\n            <Typography variant=\"h2\">Ongoing polls</Typography>\n            <Stack\n              direction=\"row\"\n              marginTop=\"4em\"\n              columnGap=\"4em\"\n              rowGap=\"4em\"\n              display=\"flex\"\n              flexWrap=\"wrap\"\n            >\n              {polls.map((poll) => (\n                <PollCard\n                  key={poll.id}\n                  cardTitle={poll.title}\n                  cardDescription={poll.description}\n                  buttonText={props.pollCardButtonText}\n                  onClickHandler={props.pollCardHandler}\n                />\n              ))}\n            </Stack>\n          </Box>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default PollsPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}