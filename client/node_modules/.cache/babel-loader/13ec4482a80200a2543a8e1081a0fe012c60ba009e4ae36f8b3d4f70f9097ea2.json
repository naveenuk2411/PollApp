{"ast":null,"code":"var _jsxFileName = \"/Users/naveen.kumar3/PollReactApp/pollapp/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport \"./App.css\";\nimport { Box, createTheme } from \"@mui/material\";\nimport { ThemeProvider } from \"@mui/material\";\nimport PollsPage from \"./pages/PollsPage\";\nimport CreatePollPage from \"./pages/CreatePollPage\";\nimport { useAuth } from \"./customHooks/useAuth\";\nimport { PollPageType } from \"./types/Poll\";\nimport axios from \"axios\";\nimport { POLL_SERVER_GET_ALL_POLLS } from \"./constants/Routes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst theme = createTheme({\n  typography: {\n    fontFamily: [\"Poppins\", \"sans-serif\"].join(\",\"),\n    button: {\n      textTransform: \"none\"\n    }\n  }\n});\nconst pollsInfo = [{\n  title: \"Poll Title\",\n  description: \"Poll Description\"\n}, {\n  title: \"Poll Title\",\n  description: \"Poll Description\"\n}, {\n  title: \"Poll Title\",\n  description: \"Poll Description\"\n}, {\n  title: \"Poll Title\",\n  description: \"Poll Description\"\n}, {\n  title: \"Poll Title\",\n  description: \"Poll Description\"\n}, {\n  title: \"Poll Title\",\n  description: \"Poll Description\"\n}];\nconst dummyHandler = () => {};\nfunction App() {\n  _s();\n  const [polls, setPolls] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [hasError, setHasError] = React.useState(false);\n  const [errorMessage, setErrorMessage] = React.useState(\"\");\n  const {\n    authToken\n  } = useAuth();\n  const fetchPolls = async () => {\n    setIsLoading(true);\n    setHasError(false);\n    setErrorMessage(\"\");\n    try {\n      const res = await axios.get(POLL_SERVER_GET_ALL_POLLS, {\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n      console.log(\"Fetch polls\", res);\n    } catch (error) {\n      setHasError(true);\n      setErrorMessage(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  React.useEffect(() => {\n    fetchPolls();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          marginLeft: \"5%\",\n          marginRight: \"5%\",\n          children: /*#__PURE__*/_jsxDEV(Routes, {\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              path: \"/\",\n              element: /*#__PURE__*/_jsxDEV(PollsPage, {\n                pollPageType: PollPageType.ONGOING,\n                polls: pollsInfo,\n                pollCardButtonText: \"Vote\",\n                pollCardHandler: dummyHandler\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/past-polls\",\n              element: /*#__PURE__*/_jsxDEV(PollsPage, {\n                pollPageType: PollPageType.PAST,\n                polls: pollsInfo,\n                pollCardButtonText: \"Show vote results\",\n                pollCardHandler: dummyHandler\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/create-poll\",\n              element: /*#__PURE__*/_jsxDEV(CreatePollPage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 51\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/manage-poll\",\n              element: /*#__PURE__*/_jsxDEV(PollsPage, {\n                pollPageType: PollPageType.MANAGE,\n                polls: pollsInfo,\n                pollCardButtonText: \"View poll\",\n                pollCardHandler: dummyHandler\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vJEMiWOqrrQeuptUHvdnGbs4Czs=\", false, function () {\n  return [useAuth];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Routes","Route","Navbar","Box","createTheme","ThemeProvider","PollsPage","CreatePollPage","useAuth","PollPageType","axios","POLL_SERVER_GET_ALL_POLLS","jsxDEV","_jsxDEV","Fragment","_Fragment","theme","typography","fontFamily","join","button","textTransform","pollsInfo","title","description","dummyHandler","App","_s","polls","setPolls","useState","isLoading","setIsLoading","hasError","setHasError","errorMessage","setErrorMessage","authToken","fetchPolls","res","get","headers","Authorization","console","log","error","message","useEffect","children","fileName","_jsxFileName","lineNumber","columnNumber","marginLeft","marginRight","path","element","pollPageType","ONGOING","pollCardButtonText","pollCardHandler","PAST","MANAGE","_c","$RefreshReg$"],"sources":["/Users/naveen.kumar3/PollReactApp/pollapp/src/App.tsx"],"sourcesContent":["import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport \"./App.css\";\nimport { Box, createTheme } from \"@mui/material\";\nimport { ThemeProvider } from \"@mui/material\";\nimport PollsPage, { PollInfo } from \"./pages/PollsPage\";\nimport CreatePollPage from \"./pages/CreatePollPage\";\nimport { AuthenticatorProvider, useAuth } from \"./customHooks/useAuth\";\nimport { PollPageType } from \"./types/Poll\";\nimport axios from \"axios\";\nimport { POLL_SERVER_GET_ALL_POLLS } from \"./constants/Routes\";\n\nconst theme = createTheme({\n  typography: {\n    fontFamily: [\"Poppins\", \"sans-serif\"].join(\",\"),\n    button: {\n      textTransform: \"none\",\n    },\n  },\n});\n\nconst pollsInfo: PollInfo[] = [\n  {\n    title: \"Poll Title\",\n    description: \"Poll Description\",\n  },\n  {\n    title: \"Poll Title\",\n    description: \"Poll Description\",\n  },\n  {\n    title: \"Poll Title\",\n    description: \"Poll Description\",\n  },\n  {\n    title: \"Poll Title\",\n    description: \"Poll Description\",\n  },\n  {\n    title: \"Poll Title\",\n    description: \"Poll Description\",\n  },\n  {\n    title: \"Poll Title\",\n    description: \"Poll Description\",\n  },\n];\n\nconst dummyHandler = () => {};\n\nfunction App() {\n  const [polls, setPolls] = React.useState<PollInfo[]>([]);\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n  const [hasError, setHasError] = React.useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = React.useState<string>(\"\");\n\n  const { authToken } = useAuth();\n\n  const fetchPolls = async () => {\n    setIsLoading(true);\n    setHasError(false);\n    setErrorMessage(\"\");\n\n    try {\n      const res = await axios.get(POLL_SERVER_GET_ALL_POLLS, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      });\n      console.log(\"Fetch polls\", res);\n    } catch (error) {\n      setHasError(true);\n      setErrorMessage((error as Error).message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  React.useEffect(() => {\n    fetchPolls();\n  }, []);\n\n  return (\n    <Router>\n      <ThemeProvider theme={theme}>\n        <>\n          <Navbar />\n          <Box marginLeft=\"5%\" marginRight=\"5%\">\n            <Routes>\n              <Route\n                path=\"/\"\n                element={\n                  <PollsPage\n                    pollPageType={PollPageType.ONGOING}\n                    polls={pollsInfo}\n                    pollCardButtonText=\"Vote\"\n                    pollCardHandler={dummyHandler}\n                  />\n                }\n              />\n              <Route\n                path=\"/past-polls\"\n                element={\n                  <PollsPage\n                    pollPageType={PollPageType.PAST}\n                    polls={pollsInfo}\n                    pollCardButtonText=\"Show vote results\"\n                    pollCardHandler={dummyHandler}\n                  />\n                }\n              />\n              <Route path=\"/create-poll\" element={<CreatePollPage />} />\n              <Route\n                path=\"/manage-poll\"\n                element={\n                  <PollsPage\n                    pollPageType={PollPageType.MANAGE}\n                    polls={pollsInfo}\n                    pollCardButtonText=\"View poll\"\n                    pollCardHandler={dummyHandler}\n                  />\n                }\n              />\n            </Routes>\n          </Box>\n        </>\n      </ThemeProvider>\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}