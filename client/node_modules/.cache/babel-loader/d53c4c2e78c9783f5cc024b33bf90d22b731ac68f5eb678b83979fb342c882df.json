{"ast":null,"code":"import React from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreatePollPage = () => {\n  //   const [isLoading, setIsLoading] = React.useState<boolean>(false);\n  //   const [hasError, setHasError] = React.useState<boolean>(false);\n  //   const [selectedOption, setSelectedOption] = React.useState<number>();\n  //   const [errorMessage, setErrorMessage] = React.useState<string>(\"\");\n\n  //   const {authToken} = use\n\n  //   const createPoll = async () => {\n  //     setIsLoading(true);\n  //     setHasError(false);\n  //     setErrorMessage(\"\");\n  //     try {\n  //       const res = await axios.get(POLL_SERVER_CREATE_POLL, {\n  //         headers: {\n  //           Authorization: `Bearer ${authToken}`,\n  //         },\n  //       });\n  //       console.log(\"poll options\", res.data.pollOptions);\n  //       let pollOptionsData: PollOption[] = [];\n  //       pollOptionsData = res.data.pollOptions.map((pollOption: any) => {\n  //         return {\n  //           id: pollOption.id,\n  //           text: pollOption.text,\n  //         };\n  //       });\n  //     } catch (error) {\n  //       console.log(\"Error in fetching polls\", error);\n  //       setHasError(true);\n  //       setErrorMessage((error as Error).message);\n  //     } finally {\n  //       setIsLoading(false);\n  //     }\n  //   };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"CreatePollPage\"\n  }, void 0, false);\n};\n_c = CreatePollPage;\nexport default CreatePollPage;\nvar _c;\n$RefreshReg$(_c, \"CreatePollPage\");","map":{"version":3,"names":["React","Fragment","_Fragment","jsxDEV","_jsxDEV","CreatePollPage","children","_c","$RefreshReg$"],"sources":["/Users/naveen.kumar3/PollReactApp/pollapp/src/pages/CreatePollPage.tsx"],"sourcesContent":["import React from \"react\";\n\nconst CreatePollPage = (): JSX.Element => {\n  //   const [isLoading, setIsLoading] = React.useState<boolean>(false);\n  //   const [hasError, setHasError] = React.useState<boolean>(false);\n  //   const [selectedOption, setSelectedOption] = React.useState<number>();\n  //   const [errorMessage, setErrorMessage] = React.useState<string>(\"\");\n\n  //   const {authToken} = use\n\n  //   const createPoll = async () => {\n  //     setIsLoading(true);\n  //     setHasError(false);\n  //     setErrorMessage(\"\");\n  //     try {\n  //       const res = await axios.get(POLL_SERVER_CREATE_POLL, {\n  //         headers: {\n  //           Authorization: `Bearer ${authToken}`,\n  //         },\n  //       });\n  //       console.log(\"poll options\", res.data.pollOptions);\n  //       let pollOptionsData: PollOption[] = [];\n  //       pollOptionsData = res.data.pollOptions.map((pollOption: any) => {\n  //         return {\n  //           id: pollOption.id,\n  //           text: pollOption.text,\n  //         };\n  //       });\n  //     } catch (error) {\n  //       console.log(\"Error in fetching polls\", error);\n  //       setHasError(true);\n  //       setErrorMessage((error as Error).message);\n  //     } finally {\n  //       setIsLoading(false);\n  //     }\n  //   };\n  return <>CreatePollPage</>;\n};\n\nexport default CreatePollPage;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,cAAc,GAAGA,CAAA,KAAmB;EACxC;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,oBAAOD,OAAA,CAAAF,SAAA;IAAAI,QAAA,EAAE;EAAc,gBAAE,CAAC;AAC5B,CAAC;AAACC,EAAA,GAnCIF,cAAc;AAqCpB,eAAeA,cAAc;AAAC,IAAAE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}