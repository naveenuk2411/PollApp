{"ast":null,"code":"var _jsxFileName = \"/Users/naveen.kumar3/PollReactApp/pollapp/src/pages/PollsPage.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Box, Stack, Typography } from \"@mui/material\";\nimport PollCard from \"../components/PollCard\";\nimport { PollPageType } from \"../types/Poll\";\nimport axios from \"axios\";\nimport { POLL_SERVER_GET_ALL_POLLS } from \"../constants/Routes\";\nimport { useAuth } from \"../customHooks/useAuth\";\nimport { useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PollsPage = props => {\n  _s();\n  const [polls, setPolls] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [hasError, setHasError] = React.useState(false);\n  const [errorMessage, setErrorMessage] = React.useState(\"\");\n  const {\n    authToken\n  } = useAuth();\n  const location = useLocation();\n  const fetchPolls = async () => {\n    setIsLoading(true);\n    setHasError(false);\n    setErrorMessage(\"\");\n    try {\n      const res = await axios.get(POLL_SERVER_GET_ALL_POLLS, {\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n      let pollsData = [];\n      pollsData = res.data.polls.filter(poll => {\n        if (props.pollPageType === PollPageType.ONGOING && poll.status === true) {\n          return {\n            id: poll.id,\n            title: poll.title,\n            desciption: poll.description\n          };\n        }\n        if (props.pollPageType === PollPageType.PAST && poll.status === false) {\n          return {\n            id: poll.id,\n            title: poll.title,\n            desciption: poll.description\n          };\n        }\n      });\n      console.log(\"Polls Data\", pollsData);\n      setPolls(pollsData);\n    } catch (error) {\n      console.log(\"Error in fetching polls\", error);\n      setHasError(true);\n      setErrorMessage(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  React.useEffect(() => {\n    fetchPolls();\n  }, [location.pathname]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h2\",\n      children: \"Fetching polls information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this) : hasError ? /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h2\",\n      children: \"Something went wrong from our end\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this) : polls.length === 0 ? /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h2\",\n      children: \"No polls found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          children: props.pollPageType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          direction: \"row\",\n          marginTop: \"4em\",\n          columnGap: \"4em\",\n          rowGap: \"4em\",\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          children: polls.map(poll => /*#__PURE__*/_jsxDEV(PollCard, {\n            pollInfo: poll,\n            buttonText: props.pollCardButtonText,\n            onClickHandler: props.selectedPollHandler\n          }, poll.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)\n  }, void 0, false);\n};\n_s(PollsPage, \"QBcSxfAtUrI5A5yZq/aP0U9EHaY=\", false, function () {\n  return [useAuth, useLocation];\n});\n_c = PollsPage;\nexport default PollsPage;\nvar _c;\n$RefreshReg$(_c, \"PollsPage\");","map":{"version":3,"names":["React","Box","Stack","Typography","PollCard","PollPageType","axios","POLL_SERVER_GET_ALL_POLLS","useAuth","useLocation","jsxDEV","_jsxDEV","Fragment","_Fragment","PollsPage","props","_s","polls","setPolls","useState","isLoading","setIsLoading","hasError","setHasError","errorMessage","setErrorMessage","authToken","location","fetchPolls","res","get","headers","Authorization","pollsData","data","filter","poll","pollPageType","ONGOING","status","id","title","desciption","description","PAST","console","log","error","message","useEffect","pathname","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","length","direction","marginTop","columnGap","rowGap","display","flexWrap","map","pollInfo","buttonText","pollCardButtonText","onClickHandler","selectedPollHandler","_c","$RefreshReg$"],"sources":["/Users/naveen.kumar3/PollReactApp/pollapp/src/pages/PollsPage.tsx"],"sourcesContent":["import React from \"react\";\nimport { Box, Stack, Typography } from \"@mui/material\";\nimport PollCard from \"../components/PollCard\";\nimport { PollPageType } from \"../types/Poll\";\nimport axios from \"axios\";\nimport { POLL_SERVER_GET_ALL_POLLS } from \"../constants/Routes\";\nimport { useAuth } from \"../customHooks/useAuth\";\nimport { useLocation } from \"react-router-dom\";\n\nexport interface PollInfo {\n  id: number;\n  title: string;\n  description: string;\n}\n\ninterface ActivePollsPageProps {\n  pollPageType: PollPageType;\n  pollCardButtonText: string;\n  selectedPollHandler: (poll: PollInfo) => void;\n}\n\nconst PollsPage = (props: ActivePollsPageProps): JSX.Element => {\n  const [polls, setPolls] = React.useState<PollInfo[]>([]);\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n  const [hasError, setHasError] = React.useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = React.useState<string>(\"\");\n\n  const { authToken } = useAuth();\n\n  const location = useLocation();\n  const fetchPolls = async () => {\n    setIsLoading(true);\n    setHasError(false);\n    setErrorMessage(\"\");\n    try {\n      const res = await axios.get(POLL_SERVER_GET_ALL_POLLS, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      });\n      let pollsData: PollInfo[] = [];\n      pollsData = res.data.polls.filter((poll: any) => {\n        if (\n          props.pollPageType === PollPageType.ONGOING &&\n          poll.status === true\n        ) {\n          return {\n            id: poll.id,\n            title: poll.title,\n            desciption: poll.description,\n          };\n        }\n        if (props.pollPageType === PollPageType.PAST && poll.status === false) {\n          return {\n            id: poll.id,\n            title: poll.title,\n            desciption: poll.description,\n          };\n        }\n      });\n      console.log(\"Polls Data\", pollsData);\n      setPolls(pollsData);\n    } catch (error) {\n      console.log(\"Error in fetching polls\", error);\n      setHasError(true);\n      setErrorMessage((error as Error).message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  React.useEffect(() => {\n    fetchPolls();\n  }, [location.pathname]);\n\n  return (\n    <>\n      {isLoading ? (\n        <Typography variant=\"h2\">Fetching polls information</Typography>\n      ) : hasError ? (\n        <Typography variant=\"h2\">Something went wrong from our end</Typography>\n      ) : polls.length === 0 ? (\n        <Typography variant=\"h2\">No polls found</Typography>\n      ) : (\n        <>\n          <Box>\n            <Typography variant=\"h2\">{props.pollPageType}</Typography>\n            <Stack\n              direction=\"row\"\n              marginTop=\"4em\"\n              columnGap=\"4em\"\n              rowGap=\"4em\"\n              display=\"flex\"\n              flexWrap=\"wrap\"\n            >\n              {polls.map((poll) => (\n                <PollCard\n                  key={poll.id}\n                  pollInfo={poll}\n                  buttonText={props.pollCardButtonText}\n                  onClickHandler={props.selectedPollHandler}\n                />\n              ))}\n            </Stack>\n          </Box>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default PollsPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,EAAEC,KAAK,EAAEC,UAAU,QAAQ,eAAe;AACtD,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,YAAY,QAAQ,eAAe;AAC5C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,yBAAyB,QAAQ,qBAAqB;AAC/D,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAc/C,MAAMC,SAAS,GAAIC,KAA2B,IAAkB;EAAAC,EAAA;EAC9D,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,KAAK,CAACmB,QAAQ,CAAa,EAAE,CAAC;EACxD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGrB,KAAK,CAACmB,QAAQ,CAAU,KAAK,CAAC;EAChE,MAAM,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAGvB,KAAK,CAACmB,QAAQ,CAAU,KAAK,CAAC;EAC9D,MAAM,CAACK,YAAY,EAAEC,eAAe,CAAC,GAAGzB,KAAK,CAACmB,QAAQ,CAAS,EAAE,CAAC;EAElE,MAAM;IAAEO;EAAU,CAAC,GAAGlB,OAAO,CAAC,CAAC;EAE/B,MAAMmB,QAAQ,GAAGlB,WAAW,CAAC,CAAC;EAC9B,MAAMmB,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7BP,YAAY,CAAC,IAAI,CAAC;IAClBE,WAAW,CAAC,KAAK,CAAC;IAClBE,eAAe,CAAC,EAAE,CAAC;IACnB,IAAI;MACF,MAAMI,GAAG,GAAG,MAAMvB,KAAK,CAACwB,GAAG,CAACvB,yBAAyB,EAAE;QACrDwB,OAAO,EAAE;UACPC,aAAa,EAAG,UAASN,SAAU;QACrC;MACF,CAAC,CAAC;MACF,IAAIO,SAAqB,GAAG,EAAE;MAC9BA,SAAS,GAAGJ,GAAG,CAACK,IAAI,CAACjB,KAAK,CAACkB,MAAM,CAAEC,IAAS,IAAK;QAC/C,IACErB,KAAK,CAACsB,YAAY,KAAKhC,YAAY,CAACiC,OAAO,IAC3CF,IAAI,CAACG,MAAM,KAAK,IAAI,EACpB;UACA,OAAO;YACLC,EAAE,EAAEJ,IAAI,CAACI,EAAE;YACXC,KAAK,EAAEL,IAAI,CAACK,KAAK;YACjBC,UAAU,EAAEN,IAAI,CAACO;UACnB,CAAC;QACH;QACA,IAAI5B,KAAK,CAACsB,YAAY,KAAKhC,YAAY,CAACuC,IAAI,IAAIR,IAAI,CAACG,MAAM,KAAK,KAAK,EAAE;UACrE,OAAO;YACLC,EAAE,EAAEJ,IAAI,CAACI,EAAE;YACXC,KAAK,EAAEL,IAAI,CAACK,KAAK;YACjBC,UAAU,EAAEN,IAAI,CAACO;UACnB,CAAC;QACH;MACF,CAAC,CAAC;MACFE,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEb,SAAS,CAAC;MACpCf,QAAQ,CAACe,SAAS,CAAC;IACrB,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdF,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEC,KAAK,CAAC;MAC7CxB,WAAW,CAAC,IAAI,CAAC;MACjBE,eAAe,CAAEsB,KAAK,CAAWC,OAAO,CAAC;IAC3C,CAAC,SAAS;MACR3B,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAEDrB,KAAK,CAACiD,SAAS,CAAC,MAAM;IACpBrB,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACD,QAAQ,CAACuB,QAAQ,CAAC,CAAC;EAEvB,oBACEvC,OAAA,CAAAE,SAAA;IAAAsC,QAAA,EACG/B,SAAS,gBACRT,OAAA,CAACR,UAAU;MAACiD,OAAO,EAAC,IAAI;MAAAD,QAAA,EAAC;IAA0B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,GAC9DlC,QAAQ,gBACVX,OAAA,CAACR,UAAU;MAACiD,OAAO,EAAC,IAAI;MAAAD,QAAA,EAAC;IAAiC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,GACrEvC,KAAK,CAACwC,MAAM,KAAK,CAAC,gBACpB9C,OAAA,CAACR,UAAU;MAACiD,OAAO,EAAC,IAAI;MAAAD,QAAA,EAAC;IAAc;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,gBAEpD7C,OAAA,CAAAE,SAAA;MAAAsC,QAAA,eACExC,OAAA,CAACV,GAAG;QAAAkD,QAAA,gBACFxC,OAAA,CAACR,UAAU;UAACiD,OAAO,EAAC,IAAI;UAAAD,QAAA,EAAEpC,KAAK,CAACsB;QAAY;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAa,CAAC,eAC1D7C,OAAA,CAACT,KAAK;UACJwD,SAAS,EAAC,KAAK;UACfC,SAAS,EAAC,KAAK;UACfC,SAAS,EAAC,KAAK;UACfC,MAAM,EAAC,KAAK;UACZC,OAAO,EAAC,MAAM;UACdC,QAAQ,EAAC,MAAM;UAAAZ,QAAA,EAEdlC,KAAK,CAAC+C,GAAG,CAAE5B,IAAI,iBACdzB,OAAA,CAACP,QAAQ;YAEP6D,QAAQ,EAAE7B,IAAK;YACf8B,UAAU,EAAEnD,KAAK,CAACoD,kBAAmB;YACrCC,cAAc,EAAErD,KAAK,CAACsD;UAAoB,GAHrCjC,IAAI,CAACI,EAAE;YAAAa,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAIb,CACF;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC,gBACN;EACH,gBACD,CAAC;AAEP,CAAC;AAACxC,EAAA,CAxFIF,SAAS;EAAA,QAMSN,OAAO,EAEZC,WAAW;AAAA;AAAA6D,EAAA,GARxBxD,SAAS;AA0Ff,eAAeA,SAAS;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}